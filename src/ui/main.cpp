//
// Copyright 2022 Vlad
//
// Image binarizer and text document recognizer sample project.
//

// *************************************
// includes
// *************************************

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4251)
#endif

#include <QtWidgets/QApplication>
#include <QtGui/QSurfaceFormat>
#include <QtCore/QStringList>
#include <QtCore/QFile>
#include <QtCore/QDebug>

#if defined(_MSC_VER)
#pragma warning(pop)
#endif

#if defined(_MSC_VER) && defined(_DEBUG)
  #include <crtdbg.h>
#endif

#include "main.h"
#include "WidImageBinarizer.h"


// *************************************
// funcs
// *************************************

int main(int argc, char *argv[])
{
  // Following code detect stupid memory leaks, generated by the code
  // like:
  //
  // {
  //   char *p = new char[29];
  //   p[0] = 0;
  // }

  #if defined(_MSC_VER) && defined(_DEBUG)
    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
  #endif

  QSurfaceFormat format;
  format.setVersion(4, 3);
  format.setProfile(QSurfaceFormat::CoreProfile);

  QApplication::setApplicationName(APPLICATION_NAME);
  QApplication::setOrganizationName(ORGANIZATION_NAME);

  // read command line argunments
  QStringList args;
  for (int i = 0; i < argc; ++i) {
    args << argv[i];
  }

  // detect file name to open immediately after 
  // application start
  QString fileNameOpen;
  for (int i = 1; i < argc; i += 2) {
    if (args[i] == "-o")
      fileNameOpen = args[i + 1];
  }


  QApplication a(argc, argv);
  WidImageBinarizer winMain;
  winMain.show();
  if (fileNameOpen.length() > 0) 
    winMain.performOpenFile(fileNameOpen);

#ifdef USE_DARK_SCHEME
  QFile file(":/dark.css");
  const bool okOpen = file.open(QFile::ReadOnly);
  if (!okOpen) 
    qInfo() << "Canrt load res file";
  a.setStyleSheet(file.readAll());
#endif

  const int appRes = a.exec();
  qInfo() << "Binarizer Application has been finished";

  return appRes;
}
